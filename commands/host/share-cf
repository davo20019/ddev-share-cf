#!/usr/bin/env bash

## Description: Share your DDEV site publicly via Cloudflare Tunnel
## Usage: share-cf
## Example: "ddev share-cf"

#ddev-generated

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Detect OS and architecture
detect_system() {
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    ARCH=$(uname -m)

    case "$OS" in
        linux*)
            OS_TYPE="linux"
            ;;
        darwin*)
            OS_TYPE="macos"
            ;;
        mingw*|msys*|cygwin*)
            OS_TYPE="windows"
            ;;
        *)
            OS_TYPE="unknown"
            ;;
    esac

    case "$ARCH" in
        x86_64|amd64)
            ARCH_TYPE="amd64"
            ;;
        aarch64|arm64)
            ARCH_TYPE="arm64"
            ;;
        armv7l)
            ARCH_TYPE="arm"
            ;;
        *)
            ARCH_TYPE="unknown"
            ;;
    esac
}

# Show installation instructions based on detected OS
show_install_instructions() {
    echo ""
    echo -e "${RED}‚ùå cloudflared is not installed on your system${NC}"
    echo ""
    echo -e "${YELLOW}üì¶ Installation Instructions:${NC}"
    echo ""

    case "$OS_TYPE" in
        macos)
            echo -e "${CYAN}macOS (Homebrew):${NC}"
            echo -e "  ${BLUE}brew install cloudflared${NC}"
            echo ""
            echo -e "${CYAN}macOS (Manual):${NC}"
            if [[ "$ARCH_TYPE" == "arm64" ]]; then
                echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-darwin-arm64.tgz -o cloudflared.tgz${NC}"
            else
                echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-darwin-amd64.tgz -o cloudflared.tgz${NC}"
            fi
            echo -e "  ${BLUE}tar -xzf cloudflared.tgz${NC}"
            echo -e "  ${BLUE}sudo mv cloudflared /usr/local/bin/cloudflared${NC}"
            echo -e "  ${BLUE}sudo chmod +x /usr/local/bin/cloudflared${NC}"
            ;;
        linux)
            echo -e "${CYAN}Debian/Ubuntu:${NC}"
            echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-${ARCH_TYPE}.deb -o cloudflared.deb${NC}"
            echo -e "  ${BLUE}sudo dpkg -i cloudflared.deb${NC}"
            echo ""
            echo -e "${CYAN}RHEL/CentOS/Fedora:${NC}"
            echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-${ARCH_TYPE}.rpm -o cloudflared.rpm${NC}"
            echo -e "  ${BLUE}sudo rpm -i cloudflared.rpm${NC}"
            echo ""
            echo -e "${CYAN}Other Linux (Manual):${NC}"
            echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-${ARCH_TYPE} -o cloudflared${NC}"
            echo -e "  ${BLUE}sudo mv cloudflared /usr/local/bin/cloudflared${NC}"
            echo -e "  ${BLUE}sudo chmod +x /usr/local/bin/cloudflared${NC}"
            ;;
        windows)
            echo -e "${CYAN}Windows:${NC}"
            echo -e "  ${BLUE}Download from: https://github.com/cloudflare/cloudflared/releases/latest${NC}"
            echo -e "  ${BLUE}Or use winget: winget install --id Cloudflare.cloudflared${NC}"
            echo -e "  ${BLUE}Or use Chocolatey: choco install cloudflared${NC}"
            ;;
        *)
            echo -e "${CYAN}Unknown OS - Manual Installation:${NC}"
            echo -e "  Visit: ${BLUE}https://github.com/cloudflare/cloudflared/releases/latest${NC}"
            ;;
    esac

    echo ""
    echo -e "${YELLOW}üìö More info: ${BLUE}https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/downloads/${NC}"
    echo ""
}

# Check if cloudflared is installed
if ! command -v cloudflared &> /dev/null; then
    detect_system
    show_install_instructions
    exit 1
fi

if [ -z "$DDEV_HOST_HTTP_PORT" ]; then
    echo -e "${RED}‚ùå Could not determine DDEV local port URL${NC}"
    echo -e "${YELLOW}Make sure you're in a DDEV project directory and the project is running${NC}"
    exit 1
fi

# Extract the first hostname for the Host header (needed for multisite support)
DDEV_FIRST_HOSTNAME=$(echo "$DDEV_HOSTNAME" | cut -d',' -f1)

echo -e "${GREEN}‚úÖ cloudflared is installed${NC}"
echo ""
DDEV_LOCALHOST_URL="http://127.0.0.1:${DDEV_HOST_HTTP_PORT}"
echo -e "${BLUE}üöÄ Starting Cloudflare Tunnel...${NC}"
echo -e "${YELLOW}‚è≥ Generating public URL (this may take a few seconds)...${NC}"
echo ""
echo -e "${CYAN}üìç Local site: ${DDEV_LOCALHOST_URL}${NC}"
echo ""
echo -e "${YELLOW}üí° Tip: Press Ctrl+C to stop the tunnel${NC}"

# Detect Drupal multisite setup
SITES_PHP_PATH=""
MULTISITE_DETECTED=false
if [ -f "web/sites/sites.php" ]; then
    SITES_PHP_PATH="web/sites/sites.php"
    MULTISITE_DETECTED=true
elif [ -f "docroot/sites/sites.php" ]; then
    SITES_PHP_PATH="docroot/sites/sites.php"
    MULTISITE_DETECTED=true
fi

# Detect WordPress installation
WORDPRESS_DETECTED=false
if [ "$DDEV_PROJECT_TYPE" = "wordpress" ]; then
    WORDPRESS_DETECTED=true
fi

# Detect Magento installation
MAGENTO_DETECTED=false
if [ "$DDEV_PROJECT_TYPE" = "magento" ] || [ "$DDEV_PROJECT_TYPE" = "magento2" ]; then
    MAGENTO_DETECTED=true
fi

if [ "$MULTISITE_DETECTED" = true ]; then
    echo -e "${CYAN}‚ÑπÔ∏è  Drupal multisite detected${NC}"
    echo -e "${YELLOW}üìù Note: Add the tunnel URL to ${SITES_PHP_PATH}${NC}"
    echo -e "${YELLOW}   Example: \$sites['tunnel-url.trycloudflare.com'] = 'subsite';${NC}"
fi

if [ "$WORDPRESS_DETECTED" = true ]; then
    echo -e "${CYAN}‚ÑπÔ∏è  WordPress detected${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Note: WordPress redirects may use the local domain instead of tunnel URL${NC}"
    echo -e "${YELLOW}   To fix, update URLs after tunnel starts:${NC}"
    echo -e "${YELLOW}   ddev wp option update home 'https://your-tunnel-url.trycloudflare.com'${NC}"
    echo -e "${YELLOW}   ddev wp option update siteurl 'https://your-tunnel-url.trycloudflare.com'${NC}"
fi

if [ "$MAGENTO_DETECTED" = true ]; then
    echo -e "${CYAN}‚ÑπÔ∏è  Magento detected${NC}"
    echo -e "${YELLOW}‚ö†Ô∏è  Note: Magento redirects may use the local domain instead of tunnel URL${NC}"
    echo -e "${YELLOW}   To fix, update base URLs after tunnel starts:${NC}"
    echo -e "${YELLOW}   ddev exec bin/magento config:set web/unsecure/base_url 'https://your-tunnel-url.trycloudflare.com/'${NC}"
    echo -e "${YELLOW}   ddev exec bin/magento config:set web/secure/base_url 'https://your-tunnel-url.trycloudflare.com/'${NC}"
    echo -e "${YELLOW}   ddev exec bin/magento cache:flush${NC}"
fi

echo ""

# Start the tunnel pointing to the DDEV site
# For multisite setups, we don't send a host header so the tunnel URL can be matched in sites.php
# For regular sites, we send the host header for proper routing
if [ "$MULTISITE_DETECTED" = true ]; then
    echo -e "${CYAN}üí° Multisite mode: Host header will be the tunnel URL${NC}"
    echo ""
    cloudflared tunnel --url "${DDEV_LOCALHOST_URL}"
else
    cloudflared tunnel --url "${DDEV_LOCALHOST_URL}" --http-host-header "${DDEV_FIRST_HOSTNAME}"
fi
