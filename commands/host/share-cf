#!/usr/bin/env bash

## Description: Share your DDEV site publicly via Cloudflare Tunnel
## Usage: share-cf
## Example: "ddev share-cf"

#ddev-generated

set -e

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
CYAN='\033[0;36m'
NC='\033[0m' # No Color

# Detect OS and architecture
detect_system() {
    OS=$(uname -s | tr '[:upper:]' '[:lower:]')
    ARCH=$(uname -m)

    case "$OS" in
        linux*)
            OS_TYPE="linux"
            ;;
        darwin*)
            OS_TYPE="macos"
            ;;
        mingw*|msys*|cygwin*)
            OS_TYPE="windows"
            ;;
        *)
            OS_TYPE="unknown"
            ;;
    esac

    case "$ARCH" in
        x86_64|amd64)
            ARCH_TYPE="amd64"
            ;;
        aarch64|arm64)
            ARCH_TYPE="arm64"
            ;;
        armv7l)
            ARCH_TYPE="arm"
            ;;
        *)
            ARCH_TYPE="unknown"
            ;;
    esac
}

# Show installation instructions based on detected OS
show_install_instructions() {
    echo ""
    echo -e "${RED}‚ùå cloudflared is not installed on your system${NC}"
    echo ""
    echo -e "${YELLOW}üì¶ Installation Instructions:${NC}"
    echo ""

    case "$OS_TYPE" in
        macos)
            echo -e "${CYAN}macOS (Homebrew):${NC}"
            echo -e "  ${BLUE}brew install cloudflared${NC}"
            echo ""
            echo -e "${CYAN}macOS (Manual):${NC}"
            if [[ "$ARCH_TYPE" == "arm64" ]]; then
                echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-darwin-arm64.tgz -o cloudflared.tgz${NC}"
            else
                echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-darwin-amd64.tgz -o cloudflared.tgz${NC}"
            fi
            echo -e "  ${BLUE}tar -xzf cloudflared.tgz${NC}"
            echo -e "  ${BLUE}sudo mv cloudflared /usr/local/bin/cloudflared${NC}"
            echo -e "  ${BLUE}sudo chmod +x /usr/local/bin/cloudflared${NC}"
            ;;
        linux)
            echo -e "${CYAN}Debian/Ubuntu:${NC}"
            echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-${ARCH_TYPE}.deb -o cloudflared.deb${NC}"
            echo -e "  ${BLUE}sudo dpkg -i cloudflared.deb${NC}"
            echo ""
            echo -e "${CYAN}RHEL/CentOS/Fedora:${NC}"
            echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-${ARCH_TYPE}.rpm -o cloudflared.rpm${NC}"
            echo -e "  ${BLUE}sudo rpm -i cloudflared.rpm${NC}"
            echo ""
            echo -e "${CYAN}Other Linux (Manual):${NC}"
            echo -e "  ${BLUE}curl -L https://github.com/cloudflare/cloudflared/releases/latest/download/cloudflared-linux-${ARCH_TYPE} -o cloudflared${NC}"
            echo -e "  ${BLUE}sudo mv cloudflared /usr/local/bin/cloudflared${NC}"
            echo -e "  ${BLUE}sudo chmod +x /usr/local/bin/cloudflared${NC}"
            ;;
        windows)
            echo -e "${CYAN}Windows:${NC}"
            echo -e "  ${BLUE}Download from: https://github.com/cloudflare/cloudflared/releases/latest${NC}"
            echo -e "  ${BLUE}Or use winget: winget install --id Cloudflare.cloudflared${NC}"
            echo -e "  ${BLUE}Or use Chocolatey: choco install cloudflared${NC}"
            ;;
        *)
            echo -e "${CYAN}Unknown OS - Manual Installation:${NC}"
            echo -e "  Visit: ${BLUE}https://github.com/cloudflare/cloudflared/releases/latest${NC}"
            ;;
    esac

    echo ""
    echo -e "${YELLOW}üìö More info: ${BLUE}https://developers.cloudflare.com/cloudflare-one/connections/connect-networks/downloads/${NC}"
    echo ""
}

# Check if cloudflared is installed
if ! command -v cloudflared &> /dev/null; then
    detect_system
    show_install_instructions
    exit 1
fi

# Get DDEV site URL and hostname
DDEV_PRIMARY_URL=$(ddev describe -j | grep -o '"primary_url":"[^"]*' | cut -d'"' -f4)
DDEV_HOSTNAME=$(ddev describe -j | grep -o '"hostname":"[^"]*' | head -1 | cut -d'"' -f4)

if [ -z "$DDEV_PRIMARY_URL" ]; then
    echo -e "${RED}‚ùå Could not determine DDEV site URL${NC}"
    echo -e "${YELLOW}Make sure you're in a DDEV project directory and the project is running${NC}"
    exit 1
fi

echo -e "${GREEN}‚úÖ cloudflared is installed${NC}"
echo ""
echo -e "${BLUE}üöÄ Starting Cloudflare Tunnel...${NC}"
echo -e "${YELLOW}‚è≥ Generating public URL (this may take a few seconds)...${NC}"
echo ""
echo -e "${CYAN}üìç Local site: ${DDEV_PRIMARY_URL}${NC}"
echo ""
echo -e "${YELLOW}üí° Tip: Press Ctrl+C to stop the tunnel${NC}"
echo ""

# Start the tunnel pointing to the DDEV site with proper host header
cloudflared tunnel --url "$DDEV_PRIMARY_URL" --http-host-header "$DDEV_HOSTNAME"
